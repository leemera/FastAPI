✅ 1. `asyncio.gather()` 의 동작 원리 및 활용

📌 개념
- `asyncio.gather()`는 여러 코루틴을 동시에 실행하고, 모든 작업이 완료될 때까지 기다린 후 결과를 리스트로 반환합니다.
- 병렬 실행을 위해 사용하는 대표적인 함수입니다.

📘 예시
```python
import asyncio

async def task(n):
    await asyncio.sleep(n)
    return n

async def main():
    results = await asyncio.gather(task(1), task(2), task(3))
    print(results)  # [1, 2, 3]

asyncio.run(main())
```

✅ 활용 포인트
- 여러 비동기 작업을 동시에 실행하여 응답 시간 단축.
- 순서대로 결과가 반환되므로 결과 정렬이 필요 없는 경우 적합.
- 예외 발생 시 즉시 중단, return_exceptions=True 설정으로 예외도 결과로 반환 가능.


✅ 2. `asyncio.as_completed()` 의 동작 원리 및 활용

📌 개념
- `asyncio.as_completed()`는 여러 코루틴을 동시에 실행하되, 작업이 완료되는 순서대로 결과를 얻을 수 있게 해줍니다.
- 먼저 끝나는 작업을 먼저 처리하고 싶은 경우에 유리합니다.

📘 예시
```python
import asyncio

async def task(n):
    await asyncio.sleep(n)
    return n

async def main():
    coros = [task(3), task(1), task(2)]
    for future in asyncio.as_completed(coros):
        result = await future
        print(result)  # 출력 순서: 1, 2, 3

asyncio.run(main())
```

✅ 활용 포인트
- 결과를 순차적으로 처리해야 할 때 유리.
- 오래 걸리는 작업이 있더라도 빠른 결과부터 소비할 수 있음.
- 스트리밍 응답, 백그라운드 작업 모니터링 등에 적합.


✅ 3. `Locust`란?

📌 개념
- Locust는 Python 기반의 사용자 시뮬레이션 부하 테스트 프레임워크입니다.
- 가짜 사용자가 웹 애플리케이션을 어떻게 사용하는지를 시뮬레이션하고 성능을 측정합니다.

🔧 특징
- 시나리오 기반의 테스트 작성 가능 (TaskSet 또는 FastHttpUser 사용).
- 웹 UI로 테스트 상황을 모니터링 가능.
- 비동기 HTTP 클라이언트 (httpx 기반) 지원.

📘 간단 예제
```python
from locust import HttpUser, task

class MyUser(HttpUser):
    @task
    def hello_world(self):
        self.client.get("/hello")
```

✅ 활용 포인트
- 다양한 경로에 대한 부하 테스트 작성.
- 동시 사용자 수와 요청 속도 조절 가능.
- API 성능 병목 지점 확인 및 개선에 활용.


✅ 4. 앱에 `Locust`를 사용한 부하 테스트 및 리팩토링

📌 절차 요약
1. Locust 설치: `pip install locust`
2. 테스트 시나리오 작성 (예: 로그인, 조회 등).
3. 서버 실행: `locust -f locustfile.py`
4. 웹 UI(기본 http://localhost:8089)에서 사용자 수/스폰 속도 입력 후 테스트 시작.
5. 결과 분석 → 병목 지점 확인.
6. 필요 시 비동기 처리 개선, 데이터베이스 최적화, 캐시 도입 등 리팩토링 수행.


🔄 정리

| 항목 | 설명 | 활용 포인트 |
|------|------|--------------|
| `asyncio.gather()` | 병렬 실행, 순서대로 결과 반환 | 전체 완료 후 결과가 필요한 경우 |
| `asyncio.as_completed()` | 병렬 실행, 완료 순으로 결과 반환 | 빠른 결과부터 처리해야 하는 경우 |
| `Locust` | 부하 테스트 도구 | API 서버의 성능 테스트 |
| `Locust + 앱` | 부하 테스트 후 병목 리팩토링 | 실전 성능 개선 및 문제 해결 |
