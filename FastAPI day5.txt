
1. SPEC API

- OpenAPI(Swagger) 스펙 기반의 API 문서화 방법
- FastAPI에서는 경로, 요청/응답 모델, 상태코드를 기반으로 자동 문서 생성
- 활용: API 문서 자동화, 클라이언트 코드 생성, 테스트 편의성

예시:
@app.get("/users", response_model=List[User])
def get_users(): ...


2. dmypy

- mypy의 데몬 모드 실행 도구, 대규모 프로젝트의 정적 타입 검사 속도 개선
- 백그라운드에서 mypy 실행 상태 유지 → 빠른 타입 체크 가능

사용법:
dmypy start
dmypy check my_module.py
dmypy stop


3. Python 공식문서 활용

- classmethod: 클래스 레벨에서 메서드 정의
class A:
    @classmethod
    def from_string(cls, s): ...

- 바다코끼리 연산자 (:=): 표현식에서 값을 변수에 할당
if (n := len(data)) > 10: ...

- 공식 문서를 통해 모듈 동작 원리, 내부 구조 파악 가능
https://docs.python.org/3/


4. TDD (Test Driven Development)

- 테스트 → 구현 → 리팩터 순서로 개발
- pytest, unittest 등과 함께 사용

예시:
def test_add():
    assert add(2, 3) == 5

def add(a, b):
    return a + b


5. Service Design Pattern

- 서비스 로직을 분리하여 코드 재사용성과 테스트 용이성 확보
- 비즈니스 로직을 Service 계층에 정의

예시:
class UserService:
    def create_user(self, name: str): ...


6. Repository Design Pattern

- DB 접근 로직을 인터페이스화하여 의존성 역전(DIP) 구현
- 도메인 객체와 DB 로직 분리

예시:
class UserRepository:
    def get_by_id(self, id: int): ...
    def save(self, user: User): ...


7. DTO (Data Transfer Object)

- 데이터 전달을 위한 객체 구조 정의, API 계층과 내부 로직 분리
- pydantic 모델 등을 활용하여 구현

예시:
class UserDTO(BaseModel):
    id: int
    name: str

@app.post("/users")
def create_user(user: UserDTO): ...
